cmake_minimum_required (VERSION 3.3)

project( NFIQ2_SUPERBUILD )

message(STATUS "NFIQ 2 Superbuild")

option(BUILD_NFIQ2_CLI "Build the Command-line Interface for NFIQ2" ON)

set( NO_SEARCH TRUE )

set( ROOT_PATH ${PROJECT_SOURCE_DIR} )
set( BUILD_PATH  ${CMAKE_CURRENT_BINARY_DIR} )

# ExternalProjects have their own install() that we can't control, and
# the `install' target is executed at superbuild build time. To counteract
# this, we will set CMAKE_INSTALL_PREFIX to ${INSTALL_STAGING_DIR} for all
# ExternalProjects, allowing the project to be built by non-root. The
# superbuild's install (and ultimate packaging with CPack) will merely copy
# this staging directory.
set(INSTALL_STAGING_DIR "${CMAKE_CURRENT_BINARY_DIR}/install_staging")

set(CMAKE_CXX_STANDARD 11)

# set colors for cmake comand line
include( "${ROOT_PATH}/cmake/colors.cmake" )

# detect target platform
include( "${ROOT_PATH}/cmake/target.cmake" )

# setup compiler
include( "${ROOT_PATH}/cmake/compiler.cmake" )

# include special settings for fingerjetfxose
include( "${ROOT_PATH}/cmake/fingerjetfxose.cmake" )

add_subdirectory("${ROOT_PATH}/biomdi/" "${BUILD_PATH}/biomdi/")
add_subdirectory("${ROOT_PATH}/fingerjetfxose/FingerJetFXOSE/libFRFXLL/src/" "${BUILD_PATH}/fingerjetfxose/FingerJetFXOSE/libFRFXLL/src/")

# forwarding 32/64 compiler flags
if( 32BITS)
  set( COMPILER_CMAKE_ARGS
    -DCMAKE_C_FLAGS="-m32"
    -DCMAKE_CXX_FLAGS="-m32"
  )
elseif( 64BITS)
  set( COMPILER_CMAKE_ARGS
    -DCMAKE_C_FLAGS="-m64"
    -DCMAKE_CXX_FLAGS="-m64"
  )
endif()

# forwarding android build flags
if( NOT "${ANDROID_ABI}" STREQUAL "")
  message( STATUS "${Gn}-- Forwarding Android build flags to the external projects${Na}" )
  set(ANDROID_CMAKE_ARGS
    -DANDROID_ABI=${ANDROID_ABI}
    -DANDROID_PLATFORM=${ANDROID_PLATFORM} 
    -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
    -DCMAKE_ANDROID_NDK=${CMAKE_ANDROID_NDK}
    -DANDROID_TARGET=${ANDROID_TARGET}
  )
endif()

# forwarding android build flags
if( APPLE AND NOT ( "${CMAKE_TOOLCHAIN_FILE}" STREQUAL ""))
  message( STATUS "${Gn}-- Forwarding IOS build flags to the external projects${Na}" )
  set(IOS_CMAKE_ARGS
    -DPLATFORM=${PLATFORM} 
    -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
    -DENABLE_ARC=${ENABLE_ARC}
  )
endif()

include(ExternalProject)

set(MULTI_CONFIG_ARGS)
if (${CMAKE_VERSION} VERSION_GREATER "3.8.99999")
	if (${GENERATOR_IS_MULTI_CONFIG})
		list(APPEND MULTI_CONFIG_ARGS 
			-DCMAKE_CONFIGURATION_TYPES=${CMAKE_CONFIGURATION_TYPES}
			)
	endif()
elseif (MSVC OR Xcode)
	list(APPEND MULTI_CONFIG_ARGS 
		-DCMAKE_CONFIGURATION_TYPES=${CMAKE_CONFIGURATION_TYPES}
		)
endif()

set(OPENCV_CMAKE_ARGS
	-DBUILD_SHARED_LIBS=OFF
	-DBUILD_OPENCV_APPS=OFF
	-DBUILD_ANDROID_EXAMPLES=OFF
	-DBUILD_DOCS=OFF
	-DBUILD_EXAMPLES=OFF
	-DBUILD_PACKAGE=OFF
	-DBUILD_PERF_TESTS=OFF
	-DBUILD_TESTS=OFF
	-DBUILD_WITH_DEBUG_INFO=OFF
	-DBUILD_FAT_JAVA_LIB=OFF
	-DBUILD_ANDROID_SERVICE=OFF
	-DBUILD_ANDROID_PACKAGE=OFF
	-DBUILD_TINY_GPU_MODULE=OFF
	-DENABLE_PRECOMPILED_HEADERS=OFF
	-DWITH_GTK=OFF
	-DENABLE_FAST_MATH=OFF
	-DWITH_PROTOBUF=OFF
	-DBUILD_PROTOBUF=OFF
	-DWITH_IPP=OFF
	-DWITH_ITT=OFF
	-DWITH_DSHOW=OFF
	-DWITH_MSMF=OFF
	-DWITH_FFMPEG=OFF
	-DWITH_EIGEN=OFF
	-DWITH_TBB=OFF 
	-DWITH_OPENMP=OFF 
	-DWITH_PTHREADS_PF=OFF
	-DWITH_OPENJPEG=OFF 
	-DBUILD_OPENJPEG=OFF
	-DWITH_TIFF=OFF
	-DBUILD_TIFF=OFF
	-DWITH_PNG=OFF
	-DWITH_JASPER=OFF
	-DWITH_JPEG=OFF
	-DBUILD_PNG=OFF
	-DBUILD_ZLIB=OFF
	-DBUILD_JASPER=OFF
	-DBUILD_JPEG=OFF 
	-DBUILD_LIST="core,ml,imgproc,highgui,flann,features2d,calib3d,video,objdetect,photo")

if("${TARGET_PLATFORM}" MATCHES "win*")
list(APPEND OPENCV_CMAKE_ARGS
	-DBUILD_WITH_STATIC_CRT=ON)
endif("${TARGET_PLATFORM}" MATCHES "win*")

if ("${TARGET_PLATFORM}" MATCHES "apple32")
	list(APPEND OPENCV_CMAKE_ARGS -DWITH_LAPACK=OFF)
endif ()

set(VCPKG_CMAKE_ARGS)
if (MSVC)
	list(APPEND VCPKG_CMAKE_ARGS
		-DVCPKG_VERBOSE=${VCPKG_VERBOSE}
		-DVCPKG_TARGET_TRIPLET=${VCPKG_TARGET_TRIPLET}
		)
endif()

ExternalProject_Add(OpenCV
	SOURCE_DIR ${PROJECT_SOURCE_DIR}/opencv
	CMAKE_ARGS
		${OPENCV_CMAKE_ARGS}
		${COMPILER_CMAKE_ARGS}
		${ANDROID_CMAKE_ARGS}
		${IOS_CMAKE_ARGS}
		${MULTI_CONFIG_ARGS}
		-DCMAKE_INSTALL_PREFIX=${INSTALL_STAGING_DIR}
)

if (BUILD_NFIQ2_CLI)
ExternalProject_Add(libbiomeval
	SOURCE_DIR ${PROJECT_SOURCE_DIR}/libbiomeval
	INSTALL_COMMAND ""
	CMAKE_ARGS
		-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
		-DBUILD_BIOMEVAL_TESTS=OFF
		-DCMAKE_INSTALL_PREFIX=${INSTALL_STAGING_DIR}
		-DBUILD_BIOMEVAL_SHARED=OFF
		${VCPKG_CMAKE_ARGS}
		${MULTI_CONFIG_ARGS}
)
endif(BUILD_NFIQ2_CLI)

ExternalProject_Add(nfiq2
	SOURCE_DIR	${ROOT_PATH}/NFIQ2/NFIQ2Algorithm
	CMAKE_ARGS
		-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
		-DBUILD_NFIQ2_CLI=${BUILD_NFIQ2_CLI}
		-DSUPERBUILD_ROOT_PATH=${ROOT_PATH}
		-DTARGET_PLATFORM=${TARGET_PLATFORM}
		${COMPILER_CMAKE_ARGS}
		-DCMAKE_INSTALL_PREFIX=${INSTALL_STAGING_DIR}
		${ANDROID_CMAKE_ARGS}
		${IOS_CMAKE_ARGS}
		${VCPKG_CMAKE_ARGS}
		${MULTI_CONFIG_ARGS}
	BUILD_ALWAYS	YES
)
ExternalProject_Add_StepDependencies(nfiq2 build OpenCV biomdi fmr FRFXLL_static)

if (BUILD_NFIQ2_CLI)
	ExternalProject_Add_StepDependencies(nfiq2 build libbiomeval)
endif(BUILD_NFIQ2_CLI)

ExternalProject_Add(nfiq2api
	SOURCE_DIR	${ROOT_PATH}/NFIQ2/NFIQ2Api
	CMAKE_ARGS
		-DSUPERBUILD_ROOT_PATH=${ROOT_PATH}
		${COMPILER_CMAKE_ARGS}
		-DCMAKE_INSTALL_PREFIX=${INSTALL_STAGING_DIR}
		${ANDROID_CMAKE_ARGS}
		${IOS_CMAKE_ARGS}
	BUILD_ALWAYS	YES
)
ExternalProject_Add_StepDependencies(nfiq2api build nfiq2)

if (UNIX)
	include(GNUInstallDirs)
endif()

list(APPEND CPACK_SOURCE_IGNORE_FILES "^${CMAKE_SOURCE_DIR}/build[\\-_/]")
list(APPEND CPACK_SOURCE_IGNORE_FILES "^${CMAKE_BINARY_DIR}")

# Tell CPack to pack up the install
install(DIRECTORY "${INSTALL_STAGING_DIR}/${CMAKE_INSTALL_BINDIR}"
	DESTINATION ${CMAKE_INSTALL_PREFIX}
	COMPONENT nfiq2_cli)
install(DIRECTORY "${INSTALL_STAGING_DIR}/${CMAKE_INSTALL_DATADIR}"
	DESTINATION ${CMAKE_INSTALL_PREFIX}
	COMPONENT nfiq2_cli)
install(DIRECTORY "${INSTALL_STAGING_DIR}/${CMAKE_INSTALL_LIBDIR}"
	DESTINATION ${CMAKE_INSTALL_PREFIX}
	COMPONENT development)
install(DIRECTORY "${INSTALL_STAGING_DIR}/${CMAKE_INSTALL_INCLUDEDIR}"
	DESTINATION ${CMAKE_INSTALL_PREFIX}
	COMPONENT development)

include(NFIQ2/version.cmake)
set(CPACK_PACKAGE_NAME "nfiq2")
set(CPACK_PACKAGE_VENDOR "${NFIQ2_PRODUCT_VENDOR}")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${NFIQ2_PRODUCT_DESCRIPTION_SHORT}")
set(CPACK_PACKAGE_HOMEPAGE_URL "https://github.com/usnistgov/nfiq2")
set(CPACK_PACKAGE_VERSION "${NFIQ2_VERSION}")
set(CPACK_PACKAGE_VERSION_MAJOR "${NFIQ2_VERSION_MAJOR}")
set(CPACK_PACKAGE_VERSION_MINOR "${NFIQ2_VERSION_MINOR}")
set(CPACK_PACKAGE_VERSION_PATCH "${NFIQ2_VERSION_PATCH}")

set(CPACK_COMPONENTS_ALL nfiq2_cli development)
set(CPACK_COMPONENT_NFIQ2_CLI_DISPLAY_NAME "${NFIQ2_PRODUCT_NAME} Command Line Interface")
set(CPACK_COMPONENT_LIBRARY_DISPLAY_NAME "${NFIQ2_PRODUCT_NAME} Development Files")

include(CPack)
