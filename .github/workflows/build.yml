name: Build Libraries and CLI

on:
  pull_request:
    paths-ignore:
      - '.gitignore'
      - '.travis.yml'
      - '**.md'
      - 'appveyor.yml'
      - 'complianceTestSet/**'
  push:
    branches:
      - master
    paths-ignore:
      - '.gitignore'
      - '.travis.yml'
      - '**.md'
      - 'appveyor.yml'
      - 'complianceTestSet/**'

env:
  CONFIGURATION: Release
  BUILD_NFIQ2_CLI: ON
  vcpkg: fresh-vcpkg

jobs:
  build:
    name: Build Matrix

    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          # https://github.com/actions/virtual-environments
          - { os: macOS-10.15, arch: x64 }
          - { os: ubuntu-16.04, arch: x64 }
          - { os: ubuntu-18.04, arch: x64 }
          - { os: ubuntu-20.04, arch: x64 }
          - { os: windows-2019, arch: x64 }
          - { os: windows-2019, arch: x86 }
          - { os: windows-2016, arch: x64 }
          - { os: windows-2016, arch: x86 }

    steps:
    - name: Checkout Code and Submodules
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: vcpkg Cache (Windows)
      id: vcpkg-cache
      uses: actions/cache@v2
      if: ${{ runner.os == 'Windows' }}
      env:
        cache-name: ${{ env.vcpkg }}
      with:
        path: ${{ github.workspace }}/${{ env.vcpkg }}
        key: ${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ env.cache-name }}-${{ hashFiles('.github/workflows/build.yml') }}
        restore-keys: |
          ${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ env.cache-name }}-${{ hashFiles('.github/workflows/build.yml') }}
          ${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ env.cache-name }}

    - name: Install vcpkg
      if: ${{ runner.os == 'Windows' && steps.vcpkg-cache.outputs.cache-hit != 'true' }}
      run: |
        git clone https://github.com/microsoft/vcpkg.git ${{ env.vcpkg }}
        .\\${{ env.vcpkg }}\\bootstrap-vcpkg.bat -disableMetrics

    - name: Build Directory Cache
      id: make-builddir-cache
      uses: actions/cache@v2
      env:
        cache-name: builddir-ninja
      with:
        path: |
          ${{ github.workspace }}/build/OpenCV-prefix
          !${{ github.workspace }}/build/nfiq2*-prefix
        key: ${{ matrix.config.os }}-${{ matrix.config.arch }}-build-${{ env.CONFIGURATION }}-${{ env.cache-name }}-${{ hashFiles('NFIQ2/version.cmake') }}
        restore-keys: |
          ${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ env.cache-name }}-${{ hashFiles('NFIQ2/version.cmake') }}
          ${{ matrix.config.os }}-${{ matrix.config.arch }}-${{ env.cache-name }}-

    - name: Install Packages (Linux)
      if: ${{ runner.os == 'Linux' }}
      shell: bash
      run: |
        sudo apt -y install \
            libdb++-dev \
            libhwloc-dev \
            libjpeg-dev \
            libopenjp2-7-dev \
            libpng-dev \
            libsqlite3-dev \
            libssl-dev \
            libtiff-dev \
            zlib1g-dev

    - name: Install Packages (macOS)
      if: ${{ runner.os == 'macOS' }}
      shell: bash
      run: |
        brew install \
            berkeley-db \
            hwloc \
            jpeg-turbo \
            libpng \
            libtiff \
            openjpeg \
            openssl \
            sqlite \
            zlib

    - name: Install Packages (Windows)
      if: ${{ runner.os == 'Windows' }}
      shell: bash
      working-directory: ${{ env.vcpkg }}
      run: |
        ./vcpkg install --triplet=${{ matrix.config.arch }}-windows-static \
          berkeleydb \
          hwloc \
          libjpeg-turbo \
          liblzma \
          libpng \
          openjpeg \
          openssl \
          sqlite3 \
          tiff \
          zlib
        # getopt is not static
        ./vcpkg install --triplet=${{ matrix.config.arch }}-windows getopt

    - name: Create Build Directory
      if: steps.make-builddir-cache.outputs.cache-hit != 'true'
      run: cmake -E make_directory ${{ github.workspace }}/build

    - name: Get CMake Version
      shell: bash
      run: cmake --version

    - name: Testing cache
      shell: bash
      run: cmake --version

    - name: Configure CMake (Single-config Generator)
      if: ${{ runner.os != 'Windows' }}
      shell: bash
      working-directory: ${{ github.workspace }}/build
      run: |
        cmake \
            -DCMAKE_BUILD_TYPE="${CONFIGURATION}" \
            -DBUILD_NFIQ2_CLI=${BUILD_NFIQ2_CLI} \
            ${GITHUB_WORKSPACE}

    - uses: seanmiddleditch/gha-setup-ninja@master
      name: Install ninja

    - name: Configure CMake (Ninja)
      if: ${{ runner.os == 'Windows' }}
      shell: bash
      env:
        cmake_arch_flag: ${{ matrix.config.arch == 'x86' && 'Win32' || 'x64' }}
      working-directory: ${{ github.workspace }}\build
      run: |
        cmake \
            -A ${cmake_arch_flag} \
            -DCMAKE_TOOLCHAIN_FILE=../${{ env.vcpkg }}/scripts/buildsystems/vcpkg.cmake \
            -DVCPKG_TARGET_TRIPLET=${{ matrix.config.arch }}-windows-static \
            -DCMAKE_CONFIGURATION_TYPES="${CONFIGURATION}" \
            -DBUILD_NFIQ2_CLI=${BUILD_NFIQ2_CLI} \
            -G Ninja \
            ${GITHUB_WORKSPACE}

    - name: Build (Single-config Generator)
      if: ${{ runner.os != 'Windows' }}
      shell: bash
      working-directory: ${{ github.workspace }}/build
      run: cmake --build .

    - name: Build (Multi-config Generator)
      if: ${{ runner.os == 'Windows' }}
      shell: bash
      working-directory: ${{ github.workspace }}/build
      run: cmake --build .
